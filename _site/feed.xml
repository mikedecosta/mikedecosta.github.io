<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Super Programmer</title>
    <description>Become that mythical super programmer every organization wishes they had.
</description>
    <link>http://superprogrammer.com/</link>
    <atom:link href="http://superprogrammer.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Oct 2018 10:22:46 -0400</pubDate>
    <lastBuildDate>Thu, 04 Oct 2018 10:22:46 -0400</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Welcome to Super Programmer!</title>
        <description>&lt;p&gt;It’s time to work your programming chops to be the most effective coding machine you see romanticized in movies and called out in every job posting looking for software engineers. It’s time to become Super Programmers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ego Check Time&lt;/strong&gt;
This isn’t about becoming some mythical programmer who can hack into the matrix, read binary, and flip bits using &lt;a href=&quot;https://xkcd.com/378/&quot;&gt;butterfly wings.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This also isn’t me declaring that I think I have super human programmer powers or that I’m any better, smarter, or more talented than the average software developer.&lt;/p&gt;

&lt;p&gt;This blog is an aspiration. An endless pursuit of being better by giving (and hopefully receiving) practical advice on how to do what appears from the outside as super human with less effort. The best programmers are the lazy programmers; The ones that will when tasked with doing something that takes 5 minutes, instead take a few hours to learn bash scripting, find themselves in the weeds about the best way to handle a variable from the command line, wonder if this could be done better in python, realize you’ve gone way too far down this path and finally come back around to what you were trying to solve in the first place and automate that original task so you never have to manually do it again.&lt;/p&gt;

&lt;p&gt;Here we’ll learn what’s worth spending time on, where you’ll get the most gains as perceived from your team, your organization and your own workload so you can feel proud, accomplished, and not overwhelmed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 01 Jan 2019 12:01:00 -0500</pubDate>
        <link>http://superprogrammer.com/blog/sticky/2019/01/01/welcome-to-super-programmer.html</link>
        <guid isPermaLink="true">http://superprogrammer.com/blog/sticky/2019/01/01/welcome-to-super-programmer.html</guid>
        
        <category>intro</category>
        
        <category>introduction</category>
        
        
        <category>blog</category>
        
        <category>sticky</category>
        
      </item>
    
      <item>
        <title></title>
        <description>
</description>
        <pubDate>Tue, 01 Jan 2019 12:01:00 -0500</pubDate>
        <link>http://superprogrammer.com/blog/2019/01/01/new-post.html</link>
        <guid isPermaLink="true">http://superprogrammer.com/blog/2019/01/01/new-post.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Super Programmer Utility Belt</title>
        <description>&lt;p&gt;This is my curated list of tools that I use to get the most out of my work.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#go/golinks&quot;&gt;go/links&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#multiple-workspaces&quot;&gt;multiple workspaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;golinks---httpswwwgolinksio&quot;&gt;go/links - https://www.golinks.io/&lt;/h2&gt;
&lt;p&gt;Go links is great for any organization that wants to share resources. If you have people constantly asking things like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;“What’s the payroll dashboard link again?”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Where are the 401k forms?”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“where are the docs for that external plug-in we wrote?”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s an amazing resource for on-boarding new team members. Just point em to the go links page and it will have all the links that the team uses and push most used links to the top.&lt;/p&gt;

&lt;h2 id=&quot;multiple-workspaces&quot;&gt;Multiple Workspaces&lt;/h2&gt;
&lt;p&gt;So many times I sit next to another developer and they go to show me something, pull up their browser and it’s got over 35 tabs up. Trying to switch into what they actually want at that time takes a few tries because more than likely, the app your working on is open in multiple tabs for multiple contexts at once and they all share the same icon (which is the only thing visible with that many tabs open)&lt;/p&gt;

&lt;p&gt;Start to compartmentalize things you’re working on into different workspaces. It’s like having extra monitors that you can shove related stuff onto, and not worry about it when you’re not working on that part, but still need it open to switch to later.&lt;/p&gt;

&lt;p&gt;Here is my current setup. I have 4 workspaces that I can easily switch to with hot-keys. Everything is contained in a virtual wrapped line of spaces. (going left to right 1, 2, 3, 4, 1, …)
  1. Workspace 1 is my main working window. It keeps my main focus and what is mot important to get done.
  2. Workspace 2 is some other side objective that I also am working on simultaneously. Maybe when workspace 1 is building, or tests are running.
  3. Workspace 3 usually ends up being &lt;a href=&quot;https://i.imgur.com/ELU1Vy7.jpg&quot;&gt;personal space&lt;/a&gt;
  4. Workspace 4 I use for my communication hub. It’s where I keep slack, my email, and anything directly related to those interactions.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 12:01:00 -0500</pubDate>
        <link>http://superprogrammer.com/blog/sticky/2019/01/01/list-tools.html</link>
        <guid isPermaLink="true">http://superprogrammer.com/blog/sticky/2019/01/01/list-tools.html</guid>
        
        <category>list</category>
        
        
        <category>blog</category>
        
        <category>sticky</category>
        
      </item>
    
      <item>
        <title>Super Programmer Book Club</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#clean-code&quot;&gt;Clean Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-to-design-programs&quot;&gt;How to Design Programs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my curated list of books that I read frequently and recommend to all software engineers.&lt;/p&gt;

&lt;p&gt;Taking a page out of the book by John Sonmez, I’ll be curating my own list of recommended software engineering books that every programmer should read.&lt;/p&gt;

&lt;h2 id=&quot;clean-code&quot;&gt;Clean Code&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;A Handbook of Agile Software Craftsmanship&lt;/em&gt;&lt;br /&gt;
The software engineers bible. I recommend reading and rereading this book every couple years to reinforce the concepts contained within. You can see my full book review here:&lt;/p&gt;

&lt;h2 id=&quot;how-to-design-programs&quot;&gt;How to Design Programs&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;An introduction to Programming and Computing&lt;/em&gt;&lt;br /&gt;
This was my computer science 101 textbook and I think this is the ideal way to learn and approach software program design. This is the long road to becoming a programmer but if you have the time and patience, I would pick up this book first.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 12:01:00 -0500</pubDate>
        <link>http://superprogrammer.com/blog/2019/01/01/list-books.html</link>
        <guid isPermaLink="true">http://superprogrammer.com/blog/2019/01/01/list-books.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Simple Integration Service</title>
        <description>&lt;p&gt;Integrating software systems can be hard. If you’re just integrating two systems, you may write a script that takes data from your own source, formats it into the target sources schema, and makes some API call to insert the data into the target system. It could be a job the runs nightly or something more advanced that gets run anytime an insert or update event happens in your own system.  This is fine for two systems, but what if you need to integrate multiple systems, even an arbitrary number of systems of which you are not in control? You could hope that they share common standards about their data, and much of your work for one system could be reused for another, but that’s most likely a pipe dream. Different providers all follow different standards (if any) about what schema to use when storing their data. Even within a single vendor, you could have 100’s of clients that all have specific custom configurations within that system that make it non-standard. Anybody who works with clients that use Salesforce, for instance, will know about this. (Not picking on Salesforce here, they are just well known but many other providers offer these things) Managing these customizations in code gets messy fast when you have potentially thousands of clients all with little idiosyncrasies that you don’t really want to devote an entire class too.&lt;/p&gt;

&lt;p&gt;Solving this problem in my professional career, I took inspiration from my work on email personalization software, and a concept that front-end software engineers were familiar with in Cascading Style Sheets. Enter the Twig templating engine. Using templates to define the specification of how to integrate the data, our code that did the work of pulling and pushing the data could be kept simple and reusable for multiple integrations. The cascading nature of Twig allowed the ability for clients to customize to their heart’s content without requiring duplicated code, or specifications. We were a Php organization and were already using Twig elsewhere in the code, so this choice made sense for us, but I’m sure there are many templating languages that have the necessary features to solve this problem.&lt;/p&gt;

&lt;p&gt;Let’s get to some code examples.&lt;/p&gt;

&lt;p&gt;Imagine we are a software company called Qaza systems, and we have a relational database with these tables and schema:&lt;/p&gt;

&lt;p&gt;Person
+———–+———–+———-+—————+
| person_id | firstname | lastname |     email     |
+———–+———–+———-+—————+
|         1 | Mike      | DeCosta  | md@email.com  |
|         2 | Susan     | Smith    | ss@temp.com   |
+———–+———–+———-+—————+&lt;/p&gt;

&lt;p&gt;Address
+———+——-+——-+———+———+——-+——-+
| addr_id | addr1 | addr2 | country |  city   | state |  zip  |
+———+——-+——-+———+———+——-+——-+
|       1 | 1st   | apt 1 | US      | Boston  |    MA | 02117 |
|       2 | 2nd   |       | US      | Chicago |    IL | 60605 |
+———+——-+——-+———+———+——-+——-+&lt;/p&gt;

&lt;p&gt;Person_Address
+———–+———+——–+
| person_id | addr_id |  type  |
+———–+———+——–+
|         1 |       1 | OFFICE |
|         2 |       2 | HOME   |
+———–+———+——–+&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 12:01:00 -0500</pubDate>
        <link>http://superprogrammer.com/blog/2019/01/01/integration-service.html</link>
        <guid isPermaLink="true">http://superprogrammer.com/blog/2019/01/01/integration-service.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Review - Clean Code</title>
        <description>&lt;p&gt;Review - Clean Code: A Handbook of Agile Software Craftsmanship. &lt;/p&gt;

&lt;p&gt;This book is essential for every software engineer to read. It’s been recommended at every company I’ve worked at. It’s also one of the few software engineering books I see people reading out in public. I try and reread Clean Code every couple of years to reinforce the concepts that I’ve been getting lazy on. Every time I go through it, I feel as though I pick up on some new concepts and techniques that I wasn’t paying attention to before at an earlier point in my career; This is why I think it’s important to never let this book accumulate too much dust sitting idle on your shelf and should be revisited frequently. If you’re looking to pick up this book for yourself, you can follow this affiliate link here.&lt;/p&gt;

&lt;p&gt;Here are my main takeaways from the book as of my last reading, but you really should read this book yourself for the full understanding at the level you’re currently at in your career.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Clean Code
    &lt;ul&gt;
      &lt;li&gt;You can’t rush clean code&lt;/li&gt;
      &lt;li&gt;Leave it cleaner than you found it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Meaningful Names
    &lt;ul&gt;
      &lt;li&gt;Don’t put the type of the object in the name of the variable&lt;/li&gt;
      &lt;li&gt;Use pronounceable names (generationTimestamp vs genYMDHMS)&lt;/li&gt;
      &lt;li&gt;Don’t be afraid to change the name of a class or variable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Functions
    &lt;ul&gt;
      &lt;li&gt;Keep them small&lt;/li&gt;
      &lt;li&gt;Have them do 1 thing (Single Responsibility Principle &lt;em&gt;SRP&lt;/em&gt;)&lt;/li&gt;
      &lt;li&gt;Keep them at the same abstraction level&lt;/li&gt;
      &lt;li&gt;Reduce argument counts&lt;/li&gt;
      &lt;li&gt;Extract try/catch blocks into their own function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Comments
    &lt;ul&gt;
      &lt;li&gt;Let your code be the comments&lt;/li&gt;
      &lt;li&gt;The best comment is no comment (It can never be out of date if it doesn’t exist)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Formatting
    &lt;ul&gt;
      &lt;li&gt;The code should read like a newspaper. The top = headline, as you scroll down you get more detail&lt;/li&gt;
      &lt;li&gt;The caller should be just above the callee&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Structures
    &lt;ul&gt;
      &lt;li&gt;Avoid hybrid data structure/object classes&lt;/li&gt;
      &lt;li&gt;Data structures should not have business logic within&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Error Handling
    &lt;ul&gt;
      &lt;li&gt;Checked exceptions are almost always wrong&lt;/li&gt;
      &lt;li&gt;Don’t pass or return null values&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Boundaries
    &lt;ul&gt;
      &lt;li&gt;Think about encapsulating Maps in classes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unit Tests
    &lt;ul&gt;
      &lt;li&gt;One concept per test&lt;/li&gt;
      &lt;li&gt;Give Test Drive Development TDD a try (There was a great talk given by Ian Cooper TDD, Where did it all go Wrong? that you should definitely check out.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Classes
    &lt;ul&gt;
      &lt;li&gt;Testability is a higher value than encapsulation&lt;/li&gt;
      &lt;li&gt;Keep them small (Single Responsibility Principle &lt;em&gt;SRP&lt;/em&gt;)&lt;/li&gt;
      &lt;li&gt;Depend on abstractions, not implementations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Systems
    &lt;ul&gt;
      &lt;li&gt;Utilize dependency injection&lt;/li&gt;
      &lt;li&gt;Systems design should be organic with the ability to change&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Emergence
    &lt;ul&gt;
      &lt;li&gt;Run all tests&lt;/li&gt;
      &lt;li&gt;No duplication&lt;/li&gt;
      &lt;li&gt;The code should express the intent of the program clearly&lt;/li&gt;
      &lt;li&gt;The number of classes and methods should be kept low, just enough to do the job&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Concurrency
    &lt;ul&gt;
      &lt;li&gt;A concurrent piece code should be kept separate from a non-concurrent piece code&lt;/li&gt;
      &lt;li&gt;You should not share objects between concurrent pieces of code&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Successive Refinement
    &lt;ul&gt;
      &lt;li&gt;First write dirty code, then clean it&lt;/li&gt;
      &lt;li&gt;Continuously work to keep the code clean&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JUnit Internals
    &lt;ul&gt;
      &lt;li&gt;Don’t make code that is tightly coupled&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last two chapters really need to be read through to get anything from them. Chapter 16 goes through refactoring some code and looking at how we clean code and why it’s so important. Chapter 17 talks about a bunch of code smells and some personal heuristics that Robert Martin uses in his own work to stay on the path of clean code. (If you want to watch an amazing talk about code smells, please look at &lt;a href=&quot;https://streamacon.com/video/laracon-us-2016/sandi-metz-get-a-whiff-of-this&quot;&gt;&lt;em&gt;Get a Whiff of this&lt;/em&gt;&lt;/a&gt; given by Sandy Metz at Laracon 2016)&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Jan 2019 12:01:00 -0500</pubDate>
        <link>http://superprogrammer.com/blog/2019/01/01/book-review-clean-code.html</link>
        <guid isPermaLink="true">http://superprogrammer.com/blog/2019/01/01/book-review-clean-code.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
